generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRATOR
  OWNER
  MANAGER
  EMPLOYEE
}

model User {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  password String
  whatsApp String
  cpfCnpj  String  @unique
  rgIe     String?

  role UserRole @default(EMPLOYEE)

  status             Boolean @default(true)
  hasAcceptedTerms   Boolean @default(true)
  isTwoFactorEnabled Boolean @default(false)

  emailVerified    DateTime?
  completedAccount DateTime?
  completedStore   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address               Address?
  twoFactorConfirmation TwoFactorConfirmation?

  ownerId String?
  owner   User?   @relation("users", fields: [ownerId], references: [id])
  users   User[]  @relation("users")

  selectedStore String?
  store         Store?  @relation("selectedStore", fields: [selectedStore], references: [id])

  stores Store[]
}

enum StoreRole {
  FOOD
}

model Store {
  id       String      @id @default(cuid())
  name     String
  slug     String      @unique
  email    String?
  cpfCnpj  String?
  whatsApp String?
  role     StoreRole[]
  status   Boolean     @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address?

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  users User[] @relation("selectedStore")
}

model Address {
  id           String  @id @default(cuid())
  zipCode      String
  street       String
  neighborhood String
  city         String
  state        String
  number       String?
  complement   String?

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  storeId String? @unique
  store   Store?  @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
