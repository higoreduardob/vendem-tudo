generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRATOR
  OWNER
  MANAGER
  EMPLOYEE
  CUSTOMER
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String
  password         String
  whatsApp         String
  cpfCnpj          String
  emailVerified    DateTime?
  role             UserRole
  status           Boolean   @default(true)
  hasAcceptedTerms Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address?

  completedAccount      DateTime?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  completedStore DateTime?

  ownerId String?
  owner   User?   @relation("users", fields: [ownerId], references: [id])
  users   User[]  @relation("users")

  storeId    String?
  storeOwner Store?  @relation("owner", fields: [storeId], references: [id])

  selectedStore String?
  store         Store?  @relation("selectedStore", fields: [selectedStore], references: [id])

  stores Store[]

  foodOrders FoodOrder[]

  @@unique([email, role], name: "unique_email_per_role")
  @@unique([email, storeId], name: "unique_email_per_store")
}

enum StoreRole {
  FOOD
}

enum StorePayment {
  PIX
  CASH
  VISA_DEBIT_CARD
  MASTER_DEBIT_CARD
  VISA_CREDIT_CARD
  MASTER_CREDIT_CARD
  MEAL_VOUCHER
}

enum ShippingRole {
  PICK_UP_ON_STORE
  DELIVERY
}

model Schedule {
  day     Int
  open    DateTime
  close   DateTime
  enabled Boolean

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  @@unique([day, storeId])
}

model Store {
  id           String         @id @default(cuid())
  name         String
  slug         String         @unique
  email        String?
  cpfCnpj      String?
  whatsApp     String
  about        String
  role         StoreRole[]
  payment      StorePayment[]
  shippingRole ShippingRole[]
  status       Boolean        @default(true)
  enabled      Boolean        @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address?

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  belongs User[] @relation("owner")
  users   User[] @relation("selectedStore")

  schedules Schedule[]
  shippings Shipping[]

  foods           Food[]
  foodCategories  FoodCategory[]
  foodAdditionals FoodAdditional[]
  foodOptions     FoodOption[]
  foodOrders      FoodOrder[]
}

model Address {
  id           String  @id @default(cuid())
  zipCode      String
  street       String
  neighborhood String
  city         String
  state        String
  number       String?
  complement   String?

  userId      String?    @unique
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeId     String?    @unique
  store       Store?     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  foodOrderId String?    @unique
  foodOrder   FoodOrder? @relation(fields: [foodOrderId], references: [id], onDelete: Cascade)
}

model Shipping {
  id            String       @id @default(cuid())
  neighborhood  String
  city          String
  state         String
  fee           Int?
  deadlineAt    Int?
  minimumAmount Int?
  role          ShippingRole @default(DELIVERY)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  foodOrders FoodOrder[]

  @@unique([storeId, neighborhood], name: "storeId_neighborhood")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Food {
  id          String   @id @default(cuid())
  name        String
  image       String
  description String
  ingredients String[]
  price       Int
  promotion   Int?
  status      Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId    String
  store      Store        @relation(fields: [storeId], references: [id])
  categoryId String
  category   FoodCategory @relation(fields: [categoryId], references: [id])

  additionals FoodAndAdditional[]
  items       FoodItem[]
  sales       Int?

  reviewsAvg    Int?
  reviewsAmount Int?
  reviews       Int?
}

model FoodCategory {
  id     String  @id @default(cuid())
  name   String
  status Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  foods Food[]

  @@unique([name, storeId], name: "unique_name_storeId")
}

enum FoodAdditionalRole {
  UNIQUE
  MULTIPLE
  QUANTITY
}

model FoodAdditional {
  id          String  @id @default(cuid())
  name        String
  description String
  minRequired Int?
  limit       Int?
  required    Boolean @default(false)
  status      Boolean @default(true)

  role FoodAdditionalRole @default(UNIQUE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  foods   FoodAndAdditional[]
  options FoodAdditionalAndOption[]
  items   FoodItemAdditional[]
}

model FoodAndAdditional {
  foodId           String
  foodAdditionalId String

  food           Food           @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodAdditional FoodAdditional @relation(fields: [foodAdditionalId], references: [id], onDelete: Cascade)

  @@id([foodId, foodAdditionalId])
}

model FoodOption {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Int
  status      Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  additionals FoodAdditionalAndOption[]
  items       FoodItemOption[]
}

model FoodAdditionalAndOption {
  foodOptionId     String
  foodAdditionalId String

  foodOption     FoodOption     @relation(fields: [foodOptionId], references: [id], onDelete: Cascade)
  foodAdditional FoodAdditional @relation(fields: [foodAdditionalId], references: [id], onDelete: Cascade)

  @@id([foodOptionId, foodAdditionalId])
}

enum OrderHistoryProgress {
  PENDING
  ACCEPT
  DELIVERY
  DELIVERED
  CANCELLED
}

model OrderHistory {
  id       String               @id @default(cuid())
  progress OrderHistoryProgress @default(PENDING)

  createdAt DateTime @default(now())

  foodOrderHistories OrderHistoryFoodOrder[]
}

model FoodOrder {
  id           String       @id @default(cuid())
  code         String
  amount       Int
  moneyChange  Int?
  payment      StorePayment
  shippingRole ShippingRole

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId    String
  store      Store  @relation(fields: [storeId], references: [id])
  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  address Address?

  shippingId String?
  shipping   Shipping? @relation(fields: [shippingId], references: [id])

  items     FoodItem[]
  histories OrderHistoryFoodOrder[]
}

model OrderHistoryFoodOrder {
  orderHistoryId String
  orderHistory   OrderHistory @relation(fields: [orderHistoryId], references: [id])
  foodOrderId    String
  foodOrder      FoodOrder    @relation(fields: [foodOrderId], references: [id])

  @@unique([orderHistoryId, foodOrderId])
}

model FoodItem {
  id       String  @id @default(cuid())
  reviewed Boolean @default(false)
  review   Int?
  quantity Int     @default(1)
  amount   Int
  obs      String?

  orderId String
  order   FoodOrder @relation(fields: [orderId], references: [id])
  foodId  String
  food    Food      @relation(fields: [foodId], references: [id])

  additionals FoodItemAdditional[]
}

model FoodItemAdditional {
  id String @id @default(cuid())

  foodItemId   String
  foodItem     FoodItem       @relation(fields: [foodItemId], references: [id])
  additionalId String
  additional   FoodAdditional @relation(fields: [additionalId], references: [id])

  options FoodItemOption[]

  @@unique([foodItemId, additionalId])
}

model FoodItemOption {
  foodItemAdditionalId String
  foodItemAdditional   FoodItemAdditional @relation(fields: [foodItemAdditionalId], references: [id])
  optionId             String
  option               FoodOption         @relation(fields: [optionId], references: [id])

  quantity Int @default(1)
  amount   Int

  @@unique([foodItemAdditionalId, optionId])
}
