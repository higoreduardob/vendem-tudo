generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRATOR
  OWNER
  MANAGER
  EMPLOYEE
  CUSTOMER
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String
  password         String
  whatsApp         String
  cpfCnpj          String
  emailVerified    DateTime?
  role             UserRole
  status           Boolean   @default(true)
  hasAcceptedTerms Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address?

  completedAccount      DateTime?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  completedStore DateTime?

  ownerId String?
  owner   User?   @relation("users", fields: [ownerId], references: [id])
  users   User[]  @relation("users")

  storeId    String?
  storeOwner Store?  @relation("owner", fields: [storeId], references: [id])

  selectedStore String?
  store         Store?  @relation("selectedStore", fields: [selectedStore], references: [id])

  stores Store[]

  @@unique([email, role], name: "unique_email_per_role")
  @@unique([email, storeId], name: "unique_email_per_store")
}

enum StoreRole {
  FOOD
}

model Store {
  id       String      @id @default(cuid())
  name     String
  slug     String      @unique
  email    String?
  cpfCnpj  String?
  whatsApp String?
  role     StoreRole[]
  status   Boolean     @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address?

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  belongs         User[]           @relation("owner")
  users           User[]           @relation("selectedStore")
  foods           Food[]
  foodCategories  FoodCategory[]
  foodAdditionals FoodAdditional[]
  foodOptions     FoodOption[]
}

model Address {
  id           String  @id @default(cuid())
  zipCode      String
  street       String
  neighborhood String
  city         String
  state        String
  number       String?
  complement   String?

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  storeId String? @unique
  store   Store?  @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// enum FoodTagEnum {
//   NEWEST
//   PROMOTION
//   MOST_SALE
// }

model Food {
  id          String   @id @default(cuid())
  name        String
  image       String
  description String
  ingredients String[]
  price       Int
  promotion   Int?
  status      Boolean  @default(true)

  // reviews     Review[]
  // reviewsAvg Int?
  // reviewsAmount Int?

  // tag    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId    String
  store      Store        @relation(fields: [storeId], references: [id])
  categoryId String
  category   FoodCategory @relation(fields: [categoryId], references: [id])

  additionals FoodAndAdditional[]
}

model FoodCategory {
  id     String  @id @default(cuid())
  name   String  @unique
  image  String
  status Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  foods Food[]
}

enum FoodAdditionalRole {
  UNIQUE
  MULTIPLE
  QUANTITY
}

model FoodAdditional {
  id          String  @id @default(cuid())
  name        String
  description String
  minRequired Int?
  limit       Int?
  required    Boolean @default(false)
  status      Boolean @default(true)

  role FoodAdditionalRole @default(UNIQUE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  foods   FoodAndAdditional[]
  options FoodAdditionalAndOption[]
}

model FoodAndAdditional {
  foodId           String
  foodAdditionalId String

  food           Food           @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodAdditional FoodAdditional @relation(fields: [foodAdditionalId], references: [id], onDelete: Cascade)

  @@id([foodId, foodAdditionalId])
}

model FoodOption {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Int
  status      Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  additionals FoodAdditionalAndOption[]
}

model FoodAdditionalAndOption {
  foodOptionId     String
  foodAdditionalId String

  foodOption     FoodOption     @relation(fields: [foodOptionId], references: [id], onDelete: Cascade)
  foodAdditional FoodAdditional @relation(fields: [foodAdditionalId], references: [id], onDelete: Cascade)

  @@id([foodOptionId, foodAdditionalId])
}
